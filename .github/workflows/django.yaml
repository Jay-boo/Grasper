name: Dashboard

on:
  workflow_call:

  pull_request:
    branches: 
      - 'feature-dashboard'
      - 'feature-dashboard-**'
  push:
    branches:
      - 'feature-dashboard'
      - 'feature-dashboard-**'
    # paths:
    #   - './Dashboard'
    

jobs:
  django-test-run:
    runs-on: ubuntu-latest
    services:
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: mydatabase
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./Dashboard/requirements.txt

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U myuser; do
          echo "$(date) - waiting for postgres database to start"
          sleep 1
        done

    - name: Create tables and insert data
      env:
        PGPASSWORD: mysecretpassword
      run: |
        psql -h localhost -U myuser -d mydatabase -c "
        CREATE TABLE IF NOT EXISTS topics (
          id SERIAL PRIMARY KEY,
          title VARCHAR(255) NOT NULL
        );"
        psql -h localhost -U myuser -d mydatabase -c "
        CREATE TABLE IF NOT EXISTS tags (
          id SERIAL PRIMARY KEY,
          label VARCHAR(255) NOT NULL,
          theme VARCHAR(255) NOT NULL
        );"
        psql -h localhost -U myuser -d mydatabase -c "
        CREATE TABLE messages (
          id SERIAL PRIMARY KEY,
          content TEXT NOT NULL,
          topic_id INT NOT NULL,
          tag_id INT NOT NULL,
          FOREIGN KEY (topic_id) REFERENCES topics(id),
          FOREIGN KEY (tag_id) REFERENCES tags(id)
        );"
        
    - name: Run tests
      run: | 
        cd Dashboard/dashboard
        python manage.py test


  django-deploy:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: [django-test-run]
    permissions:
      packages: write
      contents: read
      attestations: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: jamdatafab/insighthoot-dashboard

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./Dashboard
          file: ./Dashboard/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
